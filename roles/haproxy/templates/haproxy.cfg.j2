global
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    log /dev/log local0 debug
    tune.ssl.default-dh-param 2048
    ssl-server-verify none
{% if haproxy_admin_socket is defined %}
    stats socket {{ haproxy_admin_socket }} mode 666 level admin
{% endif %}
{% if haproxy_admin_address is defined %}
    stats socket ipv4@{{ haproxy_admin_address }} level admin
{% endif %}
    stats timeout 2m

defaults
    http-reuse safe
    log global
    option dontlognull
    option forwardfor
    option http-server-close
    retries 3
    timeout connect 10s
    timeout client 10s
    timeout queue 10s
    timeout server 300s
    timeout http-request 10s
    maxconn {{ lb_max_connections | default('720') }}
    default-server inter 10s fastinter 2s downinter 30s

    log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %rc\ %hr\ %hs\ %rt\ %{+Q}r\ %sslc\ %sslv\ body:%[capture.req.hdr(0)]

    stats hide-version

{% if admin_password is defined %}
# Can be used for various authentications
# in case user wants to add more backends
userlist lb_auth
    user admin password {{ admin_password | password_hash('sha512') }}
{% endif %}

frontend iri_front
    mode http
    capture request header User-Agent len 128
    option forwardfor
    maxconn {{ haproxy_iri_max_connections }}
    timeout client 5m
    timeout client-fin 5m
    timeout http-request 10s
    option log-separate-errors
    option http-buffer-request

    # Define source whitelist
    acl whitelist src {{ haproxy_whitelist | join(" ") }}

    # id=0 to store body for logging
    declare capture request len 40000
    http-request capture req.body id 0

    # diable client with no TCP body/request lenght
    tcp-request inspect-delay 30s
    acl content_present req_len gt 0
    tcp-request content accept if content_present

    # Enable tracking of counters for ip in the default stick-table
    tcp-request content track-sc0 src

    stick-table type ip size 1m expire 5m store gpc0,http_req_rate(5s),http_req_cnt,conn_cnt,sess_cnt

    acl source_is_abuser src_get_gpc0(iri_front) gt 0
    tcp-request connection reject if source_is_abuser
    tcp-request connection track-sc1 src if !source_is_abuser

    # drop connections from user with more then 500 requests in 5m
    acl source_is_hacker src_http_req_cnt(iri_front) gt 500
    tcp-request content reject if source_is_hacker

    # limit OPTIONS method because this is only used on browsers
    acl options_method method OPTIONS

    # check IRI/IOTA header if present all is fine else redirect or kick
    acl api_header req.hdr(X-IOTA-API-Version) -m found
    http-request deny if !api_header !options_method

{% if haproxy_remote_auth is defined and haproxy_remote_auth %}
    # Lock with password
    acl lb_allow http_auth(lb_auth)
    http-request allow if lb_allow
    http-request deny
{% endif %}

    # Check denied commands
    acl command_exists req.body -m sub -i command
    acl invalid_command req.body -m reg {{ haproxy_deny_regex }}
    acl bad_command req.body -m reg {{ haproxy_bad_command }}
    http-request deny if bad_command
    http-request deny if !command_exists !options_method
    http-request deny if invalid_command !whitelist

    # Check if PoW
    acl wants_pow req.body -m reg attachToTangle|interruptAttachingToTangle

    # Enable these two lines for SSL to IRI
    {% if haproxy_https is not defined or haproxy_https|bool == False %}#{% endif %}reqadd X-Forwarded-Proto:\ https
    {% if haproxy_https is not defined or haproxy_https|bool == False %}#{% endif %}bind {{ lb_bind_address }}:{{ iri_api_port_remote }} ssl crt {{ ssl_certkey_file }}

    # Disable this line and use line above for SSL
    {% if haproxy_https is defined and haproxy_https|bool == True %}#{% endif %}bind {{ lb_bind_address }}:{{ iri_api_port_remote }}

    use_backend iri_pow_back if wants_pow
    use_backend iri_back

backend iri_pow_back
    mode http
    fullconn {{ max_connections_pow_backend | default('180') }}
    option redispatch
    timeout server 5m
    timeout server-fin 5m
    filter compression

    stick-table type ip size 200k expire 30s store conn_rate(3s),http_req_rate(10s),conn_cur,sess_rate(3s)

    # dynamic stuff for frontend + raise gpc0 counter
    tcp-request content  track-sc2 src
    acl conn_rate_abuse  sc2_conn_rate gt 250
    acl http_rate_abuse  sc2_http_req_rate gt 400
    acl conn_cur_abuse  sc2_conn_cur gt 21

    # abuser marking
    acl mark_as_abuser   sc1_inc_gpc0 gt 0
    tcp-request content  reject if conn_rate_abuse mark_as_abuser
    tcp-request content  reject if http_rate_abuse mark_as_abuser
    tcp-request content  reject if conn_cur_abuse mark_as_abuser

    #acl is_bad lua.check_post -m str somestr
    #http-request deny if is_bad

    balance source

    compression algo gzip
    compression type application/json text/html text/plain text/xml text/json text/css text/javascript application/javascript

    option log-health-checks
    option httpchk POST /
    http-check expect status 400
    default-server inter 10s fall 4 rise 2
    server-template irisrv 1-{{ max_pow_backend_slots|default('10') }} 10.20.30.40:80 maxconn {{ max_connections_per_pow_backend|default('1') }} check disabled

backend iri_back
    mode http
    fullconn {{ max_connections_backend|default('180') }}
    option redispatch
    timeout server 5m
    timeout server-fin 5m
    filter compression

    stick-table type ip size 200k expire 30s store conn_rate(3s),http_req_rate(10s),conn_cur,sess_rate(3s)

    # dynamic stuff for frontend + raise gpc0 counter
    tcp-request content  track-sc2 src
    acl conn_rate_abuse  sc2_conn_rate gt 250
    acl http_rate_abuse  sc2_http_req_rate gt 400
    acl conn_cur_abuse  sc2_conn_cur gt 21

    # abuser marking
    acl mark_as_abuser   sc1_inc_gpc0 gt 0
    tcp-request content  reject if conn_rate_abuse mark_as_abuser
    tcp-request content  reject if http_rate_abuse mark_as_abuser
    tcp-request content  reject if conn_cur_abuse mark_as_abuser

    #acl is_bad lua.check_post -m str badstr
    #http-request deny if is_bad

    balance source

    compression algo gzip
    compression type application/json text/html text/plain text/xml text/json text/css text/javascript application/javascript

    option log-health-checks
    option external-check
    option httpchk POST /
    http-check expect status 400
    default-server inter 10s fall 4 rise 2
    server-template irisrv 1-{{ max_backend_slots|default('10') }} 10.20.30.40:80 check disabled

listen stats
    bind {{ haproxy_stats_address }}:{{ haproxy_stats_port }} ssl crt {{ ssl_certkey_file }}
    reqadd X-Forwarded-Proto:\ https
    mode http
    timeout client 1h
    stats enable
    stats refresh 5s
    stats hide-version
    stats uri /

    # Lock with password
    acl lb_allow http_auth(lb_auth)
    http-request auth realm UserAuth if !lb_allow
